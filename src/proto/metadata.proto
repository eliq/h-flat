package posixok;

message Metadata {

    //////////////////////////////////////////
    // Metadata Types
    //
    enum InodeType {
        POSIX        = 0;  // regular POSIX file / dir / etc. inode 
        HARDLINK_T   = 1;  // hardlinks are hard to implement when using a path-based lookup scheme...  two types of special inodes:
        HARDLINK_S   = 2;  //     source (follow to hardlink-uuid during lookup) and target (delete corresponding source during unlink)
        FORCE_UPDATE = 3;  // place-holder metadata-key used to synchronize directory moves 
    }
    required InodeType  type = 1;
    optional int64      force_update_version = 3 [default = 0]; // forcing database update when stumbling over metadata affected by path-mappings.
                                                                // this could be either due to a directory move or a symbolic link
    
    //////////////////////////////////////////
    // POSIX Metadata
    //
    optional uint32 atime       = 11 [default = 0]; // access time. gets updated on file access unless mounted with noatime
    optional uint32 mtime       = 12;               // modify time. gets updated when file content is modified. 
    optional uint32 ctime       = 13;               // change time. gets updated when the file attributes are changed AND when file content is modified. 
    optional uint32 uid         = 14;
    optional uint32 gid         = 15;
    optional uint32 mode        = 16;
    optional uint64 inode_number= 17;
    optional uint32 link_count  = 18 [default = 1]; // number of names for this inode (hardlinks)
    optional uint32 size        = 19 [default = 0]; // size in bytes, might be computed instead of stored
    optional uint32 blocks      = 20 [default = 0]; // allocated file system blocks
    
    message ExtendedAttribute {
        required string name  = 1;
        optional bytes  value = 2;
    }
    repeated ExtendedAttribute xattr = 21;
    
    
    //////////////////////////////////////////
    // Data-Management 
    //
    message BlockIntervall {
        required uint32 start = 1;
        required uint32 end   = 2;
    }
    repeated BlockIntervall data_keys = 32; // tracking all allocated data-keys to support deletion of big files with holes without key-range requests
    
    
    
    //////////////////////////////////////////
    // Path Permission Metadata
    //
    enum ReachabilityType {
        UID         = 0;
        GID         = 1;
        UID_OR_GID  = 2;
        NOT_UID     = 3;
        NOT_GID     = 4;
        GID_REQ_UID = 5;
    }
    message ReachabilityEntry {
        required ReachabilityType type = 1;
        optional uint32 gid            = 2;
        optional uint32 uid            = 3;
    }
    optional int64 path_permission_verified    = 41 [default = 0];       // pathmapdb version path permissions have been verified against
    repeated ReachabilityEntry path_permission = 42;                     // a set of reachability entries specifying the path permissions
    repeated ReachabilityEntry path_permission_children = 43;            // only for directories: store restrictions introduced by this directory so that children do not have to recompute

}