package posixok;

// This is almost too simple to be worth a protobuf. But since we're using it all over the place already, 
// let's just stay consistent and not implement our own serialization. 

// Short explanation of data structure & its use: 
// 
// Directory data is just a list of filenames without additional metadata. However, in multi-client
// scenarios diverging pathmapDB snapshots have to be taken into account. As a directory move operation
// done by another client will be invisble until the local database snapshot is updated, 'ls' should reflect this state. 
//    
// This explains the entry type and req_version fields. A client will filter out entries that have been added (or removed) 
// to the directory due to a directory move that is not in its local snapshot as these entries will be tagged with a higher
// req_version. 
// SUB entries also allow deferring costs of removing files from large directories to housekeeping. 

message DirectoryEntry {
	enum Type {
		ADD = 1;
		SUB = 2;
	};
	
	required string name		= 1;
	optional int64  req_version = 2 [default=0];
	optional Type type			= 3 [default=ADD];
};
	
	
message DirectoryData {
	repeated DirectoryEntry entries = 1; 		
}