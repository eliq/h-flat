// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "database.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace posixok {

namespace {

const ::google::protobuf::Descriptor* db_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* db_entry_TargetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* db_entries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_entries_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_database_2eproto() {
  protobuf_AddDesc_database_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "database.proto");
  GOOGLE_CHECK(file != NULL);
  db_entry_descriptor_ = file->message_type(0);
  static const int db_entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entry, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entry, target_),
  };
  db_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_entry_descriptor_,
      db_entry::default_instance_,
      db_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_entry));
  db_entry_TargetType_descriptor_ = db_entry_descriptor_->enum_type(0);
  db_entries_descriptor_ = file->message_type(1);
  static const int db_entries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entries, data_),
  };
  db_entries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_entries_descriptor_,
      db_entries::default_instance_,
      db_entries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_entries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_entries));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_database_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_entry_descriptor_, &db_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_entries_descriptor_, &db_entries::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_database_2eproto() {
  delete db_entry::default_instance_;
  delete db_entry_reflection_;
  delete db_entries::default_instance_;
  delete db_entries_reflection_;
}

void protobuf_AddDesc_database_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016database.proto\022\007posixok\"\202\001\n\010db_entry\022\016"
    "\n\006origin\030\001 \002(\t\022*\n\004type\030\002 \002(\0162\034.posixok.d"
    "b_entry.TargetType\022\016\n\006target\030\003 \001(\t\"*\n\nTa"
    "rgetType\022\010\n\004MOVE\020\001\022\010\n\004LINK\020\002\022\010\n\004NONE\020\003\"-"
    "\n\ndb_entries\022\037\n\004data\030\001 \003(\0132\021.posixok.db_"
    "entry", 205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "database.proto", &protobuf_RegisterTypes);
  db_entry::default_instance_ = new db_entry();
  db_entries::default_instance_ = new db_entries();
  db_entry::default_instance_->InitAsDefaultInstance();
  db_entries::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_database_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_database_2eproto {
  StaticDescriptorInitializer_database_2eproto() {
    protobuf_AddDesc_database_2eproto();
  }
} static_descriptor_initializer_database_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* db_entry_TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_entry_TargetType_descriptor_;
}
bool db_entry_TargetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const db_entry_TargetType db_entry::MOVE;
const db_entry_TargetType db_entry::LINK;
const db_entry_TargetType db_entry::NONE;
const db_entry_TargetType db_entry::TargetType_MIN;
const db_entry_TargetType db_entry::TargetType_MAX;
const int db_entry::TargetType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int db_entry::kOriginFieldNumber;
const int db_entry::kTypeFieldNumber;
const int db_entry::kTargetFieldNumber;
#endif  // !_MSC_VER

db_entry::db_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_entry::InitAsDefaultInstance() {
}

db_entry::db_entry(const db_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_entry::SharedCtor() {
  _cached_size_ = 0;
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_entry::~db_entry() {
  SharedDtor();
}

void db_entry::SharedDtor() {
  if (origin_ != &::google::protobuf::internal::kEmptyString) {
    delete origin_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void db_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_entry_descriptor_;
}

const db_entry& db_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_database_2eproto();
  return *default_instance_;
}

db_entry* db_entry::default_instance_ = NULL;

db_entry* db_entry::New() const {
  return new db_entry;
}

void db_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::kEmptyString) {
        origin_->clear();
      }
    }
    type_ = 1;
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->origin().data(), this->origin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .posixok.db_entry.TargetType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::posixok::db_entry_TargetType_IsValid(value)) {
            set_type(static_cast< ::posixok::db_entry_TargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional string target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin().data(), this->origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->origin(), output);
  }

  // required .posixok.db_entry.TargetType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin().data(), this->origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->origin(), target);
  }

  // required .posixok.db_entry.TargetType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // required .posixok.db_entry.TargetType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_entry::MergeFrom(const db_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_entry::CopyFrom(const db_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_entry::Swap(db_entry* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(type_, other->type_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_entry_descriptor_;
  metadata.reflection = db_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_entries::kDataFieldNumber;
#endif  // !_MSC_VER

db_entries::db_entries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_entries::InitAsDefaultInstance() {
}

db_entries::db_entries(const db_entries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_entries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_entries::~db_entries() {
  SharedDtor();
}

void db_entries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_entries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_entries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_entries_descriptor_;
}

const db_entries& db_entries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_database_2eproto();
  return *default_instance_;
}

db_entries* db_entries::default_instance_ = NULL;

db_entries* db_entries::New() const {
  return new db_entries;
}

void db_entries::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_entries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .posixok.db_entry data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_entries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .posixok.db_entry data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_entries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .posixok.db_entry data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_entries::ByteSize() const {
  int total_size = 0;

  // repeated .posixok.db_entry data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_entries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_entries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_entries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_entries::MergeFrom(const db_entries& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_entries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_entries::CopyFrom(const db_entries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_entries::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void db_entries::Swap(db_entries* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_entries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_entries_descriptor_;
  metadata.reflection = db_entries_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace posixok

// @@protoc_insertion_point(global_scope)
