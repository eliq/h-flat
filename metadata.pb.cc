// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace posixok {

namespace {

const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_ReachabilityEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_ReachabilityEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Metadata_ReachabilityType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_metadata_2eproto() {
  protobuf_AddDesc_metadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "metadata.proto");
  GOOGLE_CHECK(file != NULL);
  Metadata_descriptor_ = file->message_type(0);
  static const int Metadata_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, id_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, id_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, link_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, data_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, path_permission_verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, path_permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, path_permission_children_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
  Metadata_ReachabilityEntry_descriptor_ = Metadata_descriptor_->nested_type(0);
  static const int Metadata_ReachabilityEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_ReachabilityEntry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_ReachabilityEntry, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_ReachabilityEntry, uid_),
  };
  Metadata_ReachabilityEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_ReachabilityEntry_descriptor_,
      Metadata_ReachabilityEntry::default_instance_,
      Metadata_ReachabilityEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_ReachabilityEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata_ReachabilityEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata_ReachabilityEntry));
  Metadata_ReachabilityType_descriptor_ = Metadata_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_metadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_ReachabilityEntry_descriptor_, &Metadata_ReachabilityEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_metadata_2eproto() {
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete Metadata_ReachabilityEntry::default_instance_;
  delete Metadata_ReachabilityEntry_reflection_;
}

void protobuf_AddDesc_metadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016metadata.proto\022\007posixok\"\252\004\n\010Metadata\022\020"
    "\n\005atime\030\001 \001(\r:\0010\022\r\n\005mtime\030\002 \002(\r\022\r\n\005ctime"
    "\030\003 \002(\r\022\017\n\007id_user\030\004 \002(\r\022\020\n\010id_group\030\005 \002("
    "\r\022\014\n\004mode\030\006 \002(\r\022\025\n\nlink_count\030\007 \001(\r:\0011\022\017"
    "\n\004size\030\010 \001(\r:\0010\022\021\n\006blocks\030\t \001(\r:\0010\022\026\n\016da"
    "ta_unique_id\030\013 \001(\t\022#\n\030path_permission_ve"
    "rified\030\r \001(\003:\0010\022<\n\017path_permission\030\016 \003(\013"
    "2#.posixok.Metadata.ReachabilityEntry\022E\n"
    "\030path_permission_children\030\017 \003(\0132#.posixo"
    "k.Metadata.ReachabilityEntry\032_\n\021Reachabi"
    "lityEntry\0220\n\004type\030\001 \002(\0162\".posixok.Metada"
    "ta.ReachabilityType\022\013\n\003gid\030\002 \001(\r\022\013\n\003uid\030"
    "\003 \001(\r\"_\n\020ReachabilityType\022\007\n\003UID\020\000\022\007\n\003GI"
    "D\020\001\022\016\n\nUID_OR_GID\020\002\022\013\n\007NOT_UID\020\003\022\013\n\007NOT_"
    "GID\020\004\022\017\n\013GID_REQ_UID\020\005", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metadata.proto", &protobuf_RegisterTypes);
  Metadata::default_instance_ = new Metadata();
  Metadata_ReachabilityEntry::default_instance_ = new Metadata_ReachabilityEntry();
  Metadata::default_instance_->InitAsDefaultInstance();
  Metadata_ReachabilityEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metadata_2eproto {
  StaticDescriptorInitializer_metadata_2eproto() {
    protobuf_AddDesc_metadata_2eproto();
  }
} static_descriptor_initializer_metadata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Metadata_ReachabilityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_ReachabilityType_descriptor_;
}
bool Metadata_ReachabilityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Metadata_ReachabilityType Metadata::UID;
const Metadata_ReachabilityType Metadata::GID;
const Metadata_ReachabilityType Metadata::UID_OR_GID;
const Metadata_ReachabilityType Metadata::NOT_UID;
const Metadata_ReachabilityType Metadata::NOT_GID;
const Metadata_ReachabilityType Metadata::GID_REQ_UID;
const Metadata_ReachabilityType Metadata::ReachabilityType_MIN;
const Metadata_ReachabilityType Metadata::ReachabilityType_MAX;
const int Metadata::ReachabilityType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Metadata_ReachabilityEntry::kTypeFieldNumber;
const int Metadata_ReachabilityEntry::kGidFieldNumber;
const int Metadata_ReachabilityEntry::kUidFieldNumber;
#endif  // !_MSC_VER

Metadata_ReachabilityEntry::Metadata_ReachabilityEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metadata_ReachabilityEntry::InitAsDefaultInstance() {
}

Metadata_ReachabilityEntry::Metadata_ReachabilityEntry(const Metadata_ReachabilityEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metadata_ReachabilityEntry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  gid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata_ReachabilityEntry::~Metadata_ReachabilityEntry() {
  SharedDtor();
}

void Metadata_ReachabilityEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata_ReachabilityEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata_ReachabilityEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_ReachabilityEntry_descriptor_;
}

const Metadata_ReachabilityEntry& Metadata_ReachabilityEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Metadata_ReachabilityEntry* Metadata_ReachabilityEntry::default_instance_ = NULL;

Metadata_ReachabilityEntry* Metadata_ReachabilityEntry::New() const {
  return new Metadata_ReachabilityEntry;
}

void Metadata_ReachabilityEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    gid_ = 0u;
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata_ReachabilityEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .posixok.Metadata.ReachabilityType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::posixok::Metadata_ReachabilityType_IsValid(value)) {
            set_type(static_cast< ::posixok::Metadata_ReachabilityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // optional uint32 gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metadata_ReachabilityEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .posixok.Metadata.ReachabilityType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metadata_ReachabilityEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .posixok.Metadata.ReachabilityType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metadata_ReachabilityEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .posixok.Metadata.ReachabilityType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata_ReachabilityEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata_ReachabilityEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata_ReachabilityEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata_ReachabilityEntry::MergeFrom(const Metadata_ReachabilityEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata_ReachabilityEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata_ReachabilityEntry::CopyFrom(const Metadata_ReachabilityEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_ReachabilityEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Metadata_ReachabilityEntry::Swap(Metadata_ReachabilityEntry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gid_, other->gid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata_ReachabilityEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_ReachabilityEntry_descriptor_;
  metadata.reflection = Metadata_ReachabilityEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Metadata::kAtimeFieldNumber;
const int Metadata::kMtimeFieldNumber;
const int Metadata::kCtimeFieldNumber;
const int Metadata::kIdUserFieldNumber;
const int Metadata::kIdGroupFieldNumber;
const int Metadata::kModeFieldNumber;
const int Metadata::kLinkCountFieldNumber;
const int Metadata::kSizeFieldNumber;
const int Metadata::kBlocksFieldNumber;
const int Metadata::kDataUniqueIdFieldNumber;
const int Metadata::kPathPermissionVerifiedFieldNumber;
const int Metadata::kPathPermissionFieldNumber;
const int Metadata::kPathPermissionChildrenFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  atime_ = 0u;
  mtime_ = 0u;
  ctime_ = 0u;
  id_user_ = 0u;
  id_group_ = 0u;
  mode_ = 0u;
  link_count_ = 1u;
  size_ = 0u;
  blocks_ = 0u;
  data_unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_permission_verified_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (data_unique_id_ != &::google::protobuf::internal::kEmptyString) {
    delete data_unique_id_;
  }
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atime_ = 0u;
    mtime_ = 0u;
    ctime_ = 0u;
    id_user_ = 0u;
    id_group_ = 0u;
    mode_ = 0u;
    link_count_ = 1u;
    size_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    blocks_ = 0u;
    if (has_data_unique_id()) {
      if (data_unique_id_ != &::google::protobuf::internal::kEmptyString) {
        data_unique_id_->clear();
      }
    }
    path_permission_verified_ = GOOGLE_LONGLONG(0);
  }
  path_permission_.Clear();
  path_permission_children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atime = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atime_)));
          set_has_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mtime;
        break;
      }

      // required uint32 mtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ctime;
        break;
      }

      // required uint32 ctime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id_user;
        break;
      }

      // required uint32 id_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_user_)));
          set_has_id_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_group;
        break;
      }

      // required uint32 id_group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_group_)));
          set_has_id_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // required uint32 mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_link_count;
        break;
      }

      // optional uint32 link_count = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_count_)));
          set_has_link_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }

      // optional uint32 size = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_blocks;
        break;
      }

      // optional uint32 blocks = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blocks_)));
          set_has_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_data_unique_id;
        break;
      }

      // optional string data_unique_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_unique_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_unique_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_unique_id().data(), this->data_unique_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_path_permission_verified;
        break;
      }

      // optional int64 path_permission_verified = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_path_permission_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &path_permission_verified_)));
          set_has_path_permission_verified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_path_permission;
        break;
      }

      // repeated .posixok.Metadata.ReachabilityEntry path_permission = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_permission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_permission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_path_permission;
        if (input->ExpectTag(122)) goto parse_path_permission_children;
        break;
      }

      // repeated .posixok.Metadata.ReachabilityEntry path_permission_children = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_permission_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_permission_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_path_permission_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 atime = 1 [default = 0];
  if (has_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atime(), output);
  }

  // required uint32 mtime = 2;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mtime(), output);
  }

  // required uint32 ctime = 3;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ctime(), output);
  }

  // required uint32 id_user = 4;
  if (has_id_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id_user(), output);
  }

  // required uint32 id_group = 5;
  if (has_id_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id_group(), output);
  }

  // required uint32 mode = 6;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mode(), output);
  }

  // optional uint32 link_count = 7 [default = 1];
  if (has_link_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->link_count(), output);
  }

  // optional uint32 size = 8 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->size(), output);
  }

  // optional uint32 blocks = 9 [default = 0];
  if (has_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->blocks(), output);
  }

  // optional string data_unique_id = 11;
  if (has_data_unique_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_unique_id().data(), this->data_unique_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->data_unique_id(), output);
  }

  // optional int64 path_permission_verified = 13 [default = 0];
  if (has_path_permission_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->path_permission_verified(), output);
  }

  // repeated .posixok.Metadata.ReachabilityEntry path_permission = 14;
  for (int i = 0; i < this->path_permission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->path_permission(i), output);
  }

  // repeated .posixok.Metadata.ReachabilityEntry path_permission_children = 15;
  for (int i = 0; i < this->path_permission_children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->path_permission_children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 atime = 1 [default = 0];
  if (has_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atime(), target);
  }

  // required uint32 mtime = 2;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mtime(), target);
  }

  // required uint32 ctime = 3;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ctime(), target);
  }

  // required uint32 id_user = 4;
  if (has_id_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id_user(), target);
  }

  // required uint32 id_group = 5;
  if (has_id_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id_group(), target);
  }

  // required uint32 mode = 6;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mode(), target);
  }

  // optional uint32 link_count = 7 [default = 1];
  if (has_link_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->link_count(), target);
  }

  // optional uint32 size = 8 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->size(), target);
  }

  // optional uint32 blocks = 9 [default = 0];
  if (has_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->blocks(), target);
  }

  // optional string data_unique_id = 11;
  if (has_data_unique_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_unique_id().data(), this->data_unique_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->data_unique_id(), target);
  }

  // optional int64 path_permission_verified = 13 [default = 0];
  if (has_path_permission_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->path_permission_verified(), target);
  }

  // repeated .posixok.Metadata.ReachabilityEntry path_permission = 14;
  for (int i = 0; i < this->path_permission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->path_permission(i), target);
  }

  // repeated .posixok.Metadata.ReachabilityEntry path_permission_children = 15;
  for (int i = 0; i < this->path_permission_children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->path_permission_children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 atime = 1 [default = 0];
    if (has_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atime());
    }

    // required uint32 mtime = 2;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mtime());
    }

    // required uint32 ctime = 3;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctime());
    }

    // required uint32 id_user = 4;
    if (has_id_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id_user());
    }

    // required uint32 id_group = 5;
    if (has_id_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id_group());
    }

    // required uint32 mode = 6;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional uint32 link_count = 7 [default = 1];
    if (has_link_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link_count());
    }

    // optional uint32 size = 8 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 blocks = 9 [default = 0];
    if (has_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blocks());
    }

    // optional string data_unique_id = 11;
    if (has_data_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_unique_id());
    }

    // optional int64 path_permission_verified = 13 [default = 0];
    if (has_path_permission_verified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->path_permission_verified());
    }

  }
  // repeated .posixok.Metadata.ReachabilityEntry path_permission = 14;
  total_size += 1 * this->path_permission_size();
  for (int i = 0; i < this->path_permission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_permission(i));
  }

  // repeated .posixok.Metadata.ReachabilityEntry path_permission_children = 15;
  total_size += 1 * this->path_permission_children_size();
  for (int i = 0; i < this->path_permission_children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_permission_children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_permission_.MergeFrom(from.path_permission_);
  path_permission_children_.MergeFrom(from.path_permission_children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atime()) {
      set_atime(from.atime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_id_user()) {
      set_id_user(from.id_user());
    }
    if (from.has_id_group()) {
      set_id_group(from.id_group());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_link_count()) {
      set_link_count(from.link_count());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blocks()) {
      set_blocks(from.blocks());
    }
    if (from.has_data_unique_id()) {
      set_data_unique_id(from.data_unique_id());
    }
    if (from.has_path_permission_verified()) {
      set_path_permission_verified(from.path_permission_verified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  for (int i = 0; i < path_permission_size(); i++) {
    if (!this->path_permission(i).IsInitialized()) return false;
  }
  for (int i = 0; i < path_permission_children_size(); i++) {
    if (!this->path_permission_children(i).IsInitialized()) return false;
  }
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    std::swap(atime_, other->atime_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(id_user_, other->id_user_);
    std::swap(id_group_, other->id_group_);
    std::swap(mode_, other->mode_);
    std::swap(link_count_, other->link_count_);
    std::swap(size_, other->size_);
    std::swap(blocks_, other->blocks_);
    std::swap(data_unique_id_, other->data_unique_id_);
    std::swap(path_permission_verified_, other->path_permission_verified_);
    path_permission_.Swap(&other->path_permission_);
    path_permission_children_.Swap(&other->path_permission_children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace posixok

// @@protoc_insertion_point(global_scope)
