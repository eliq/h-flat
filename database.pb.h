// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#ifndef PROTOBUF_database_2eproto__INCLUDED
#define PROTOBUF_database_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace posixok {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_database_2eproto();
void protobuf_AssignDesc_database_2eproto();
void protobuf_ShutdownFile_database_2eproto();

class db_entry;
class db_entries;

enum db_entry_TargetType {
  db_entry_TargetType_MOVE = 1,
  db_entry_TargetType_LINK = 2,
  db_entry_TargetType_NONE = 3
};
bool db_entry_TargetType_IsValid(int value);
const db_entry_TargetType db_entry_TargetType_TargetType_MIN = db_entry_TargetType_MOVE;
const db_entry_TargetType db_entry_TargetType_TargetType_MAX = db_entry_TargetType_NONE;
const int db_entry_TargetType_TargetType_ARRAYSIZE = db_entry_TargetType_TargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* db_entry_TargetType_descriptor();
inline const ::std::string& db_entry_TargetType_Name(db_entry_TargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    db_entry_TargetType_descriptor(), value);
}
inline bool db_entry_TargetType_Parse(
    const ::std::string& name, db_entry_TargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<db_entry_TargetType>(
    db_entry_TargetType_descriptor(), name, value);
}
// ===================================================================

class db_entry : public ::google::protobuf::Message {
 public:
  db_entry();
  virtual ~db_entry();

  db_entry(const db_entry& from);

  inline db_entry& operator=(const db_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_entry& default_instance();

  void Swap(db_entry* other);

  // implements Message ----------------------------------------------

  db_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_entry& from);
  void MergeFrom(const db_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef db_entry_TargetType TargetType;
  static const TargetType MOVE = db_entry_TargetType_MOVE;
  static const TargetType LINK = db_entry_TargetType_LINK;
  static const TargetType NONE = db_entry_TargetType_NONE;
  static inline bool TargetType_IsValid(int value) {
    return db_entry_TargetType_IsValid(value);
  }
  static const TargetType TargetType_MIN =
    db_entry_TargetType_TargetType_MIN;
  static const TargetType TargetType_MAX =
    db_entry_TargetType_TargetType_MAX;
  static const int TargetType_ARRAYSIZE =
    db_entry_TargetType_TargetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TargetType_descriptor() {
    return db_entry_TargetType_descriptor();
  }
  static inline const ::std::string& TargetType_Name(TargetType value) {
    return db_entry_TargetType_Name(value);
  }
  static inline bool TargetType_Parse(const ::std::string& name,
      TargetType* value) {
    return db_entry_TargetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::std::string& origin() const;
  inline void set_origin(const ::std::string& value);
  inline void set_origin(const char* value);
  inline void set_origin(const char* value, size_t size);
  inline ::std::string* mutable_origin();
  inline ::std::string* release_origin();
  inline void set_allocated_origin(::std::string* origin);

  // required .posixok.db_entry.TargetType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::posixok::db_entry_TargetType type() const;
  inline void set_type(::posixok::db_entry_TargetType value);

  // optional string target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // @@protoc_insertion_point(class_scope:posixok.db_entry)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target();
  inline void clear_has_target();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* origin_;
  ::std::string* target_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_database_2eproto();
  friend void protobuf_AssignDesc_database_2eproto();
  friend void protobuf_ShutdownFile_database_2eproto();

  void InitAsDefaultInstance();
  static db_entry* default_instance_;
};
// -------------------------------------------------------------------

class db_entries : public ::google::protobuf::Message {
 public:
  db_entries();
  virtual ~db_entries();

  db_entries(const db_entries& from);

  inline db_entries& operator=(const db_entries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_entries& default_instance();

  void Swap(db_entries* other);

  // implements Message ----------------------------------------------

  db_entries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_entries& from);
  void MergeFrom(const db_entries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .posixok.db_entry data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::posixok::db_entry& data(int index) const;
  inline ::posixok::db_entry* mutable_data(int index);
  inline ::posixok::db_entry* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::posixok::db_entry >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::posixok::db_entry >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:posixok.db_entries)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::posixok::db_entry > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_database_2eproto();
  friend void protobuf_AssignDesc_database_2eproto();
  friend void protobuf_ShutdownFile_database_2eproto();

  void InitAsDefaultInstance();
  static db_entries* default_instance_;
};
// ===================================================================


// ===================================================================

// db_entry

// required string origin = 1;
inline bool db_entry::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_entry::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_entry::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_entry::clear_origin() {
  if (origin_ != &::google::protobuf::internal::kEmptyString) {
    origin_->clear();
  }
  clear_has_origin();
}
inline const ::std::string& db_entry::origin() const {
  return *origin_;
}
inline void db_entry::set_origin(const ::std::string& value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::kEmptyString) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void db_entry::set_origin(const char* value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::kEmptyString) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void db_entry::set_origin(const char* value, size_t size) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::kEmptyString) {
    origin_ = new ::std::string;
  }
  origin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_entry::mutable_origin() {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::kEmptyString) {
    origin_ = new ::std::string;
  }
  return origin_;
}
inline ::std::string* db_entry::release_origin() {
  clear_has_origin();
  if (origin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = origin_;
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_entry::set_allocated_origin(::std::string* origin) {
  if (origin_ != &::google::protobuf::internal::kEmptyString) {
    delete origin_;
  }
  if (origin) {
    set_has_origin();
    origin_ = origin;
  } else {
    clear_has_origin();
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .posixok.db_entry.TargetType type = 2;
inline bool db_entry::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_entry::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_entry::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_entry::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::posixok::db_entry_TargetType db_entry::type() const {
  return static_cast< ::posixok::db_entry_TargetType >(type_);
}
inline void db_entry::set_type(::posixok::db_entry_TargetType value) {
  assert(::posixok::db_entry_TargetType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string target = 3;
inline bool db_entry::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_entry::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_entry::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_entry::clear_target() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& db_entry::target() const {
  return *target_;
}
inline void db_entry::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void db_entry::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void db_entry::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_entry::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  return target_;
}
inline ::std::string* db_entry::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_entry::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// db_entries

// repeated .posixok.db_entry data = 1;
inline int db_entries::data_size() const {
  return data_.size();
}
inline void db_entries::clear_data() {
  data_.Clear();
}
inline const ::posixok::db_entry& db_entries::data(int index) const {
  return data_.Get(index);
}
inline ::posixok::db_entry* db_entries::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::posixok::db_entry* db_entries::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::posixok::db_entry >&
db_entries::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::posixok::db_entry >*
db_entries::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace posixok

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::posixok::db_entry_TargetType>() {
  return ::posixok::db_entry_TargetType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_database_2eproto__INCLUDED
