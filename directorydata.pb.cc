// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directorydata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "directorydata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace posixok {

namespace {

const ::google::protobuf::Descriptor* DirectoryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectoryEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DirectoryEntry_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DirectoryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectoryData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_directorydata_2eproto() {
  protobuf_AddDesc_directorydata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "directorydata.proto");
  GOOGLE_CHECK(file != NULL);
  DirectoryEntry_descriptor_ = file->message_type(0);
  static const int DirectoryEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, req_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, type_),
  };
  DirectoryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectoryEntry_descriptor_,
      DirectoryEntry::default_instance_,
      DirectoryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectoryEntry));
  DirectoryEntry_Type_descriptor_ = DirectoryEntry_descriptor_->enum_type(0);
  DirectoryData_descriptor_ = file->message_type(1);
  static const int DirectoryData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryData, entries_),
  };
  DirectoryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectoryData_descriptor_,
      DirectoryData::default_instance_,
      DirectoryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectoryData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_directorydata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectoryEntry_descriptor_, &DirectoryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectoryData_descriptor_, &DirectoryData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_directorydata_2eproto() {
  delete DirectoryEntry::default_instance_;
  delete DirectoryEntry_reflection_;
  delete DirectoryData::default_instance_;
  delete DirectoryData_reflection_;
}

void protobuf_AddDesc_directorydata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023directorydata.proto\022\007posixok\"~\n\016Direct"
    "oryEntry\022\014\n\004name\030\001 \002(\t\022\023\n\013req_version\030\002 "
    "\001(\003\022/\n\004type\030\003 \001(\0162\034.posixok.DirectoryEnt"
    "ry.Type:\003ADD\"\030\n\004Type\022\007\n\003ADD\020\001\022\007\n\003SUB\020\002\"9"
    "\n\rDirectoryData\022(\n\007entries\030\001 \003(\0132\027.posix"
    "ok.DirectoryEntry", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "directorydata.proto", &protobuf_RegisterTypes);
  DirectoryEntry::default_instance_ = new DirectoryEntry();
  DirectoryData::default_instance_ = new DirectoryData();
  DirectoryEntry::default_instance_->InitAsDefaultInstance();
  DirectoryData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_directorydata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_directorydata_2eproto {
  StaticDescriptorInitializer_directorydata_2eproto() {
    protobuf_AddDesc_directorydata_2eproto();
  }
} static_descriptor_initializer_directorydata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DirectoryEntry_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectoryEntry_Type_descriptor_;
}
bool DirectoryEntry_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DirectoryEntry_Type DirectoryEntry::ADD;
const DirectoryEntry_Type DirectoryEntry::SUB;
const DirectoryEntry_Type DirectoryEntry::Type_MIN;
const DirectoryEntry_Type DirectoryEntry::Type_MAX;
const int DirectoryEntry::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DirectoryEntry::kNameFieldNumber;
const int DirectoryEntry::kReqVersionFieldNumber;
const int DirectoryEntry::kTypeFieldNumber;
#endif  // !_MSC_VER

DirectoryEntry::DirectoryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirectoryEntry::InitAsDefaultInstance() {
}

DirectoryEntry::DirectoryEntry(const DirectoryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirectoryEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  req_version_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectoryEntry::~DirectoryEntry() {
  SharedDtor();
}

void DirectoryEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DirectoryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectoryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectoryEntry_descriptor_;
}

const DirectoryEntry& DirectoryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_directorydata_2eproto();
  return *default_instance_;
}

DirectoryEntry* DirectoryEntry::default_instance_ = NULL;

DirectoryEntry* DirectoryEntry::New() const {
  return new DirectoryEntry;
}

void DirectoryEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    req_version_ = GOOGLE_LONGLONG(0);
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectoryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_req_version;
        break;
      }

      // optional int64 req_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_version_)));
          set_has_req_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .posixok.DirectoryEntry.Type type = 3 [default = ADD];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::posixok::DirectoryEntry_Type_IsValid(value)) {
            set_type(static_cast< ::posixok::DirectoryEntry_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectoryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int64 req_version = 2;
  if (has_req_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->req_version(), output);
  }

  // optional .posixok.DirectoryEntry.Type type = 3 [default = ADD];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirectoryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 req_version = 2;
  if (has_req_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->req_version(), target);
  }

  // optional .posixok.DirectoryEntry.Type type = 3 [default = ADD];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirectoryEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 req_version = 2;
    if (has_req_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->req_version());
    }

    // optional .posixok.DirectoryEntry.Type type = 3 [default = ADD];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectoryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectoryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectoryEntry::MergeFrom(const DirectoryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_req_version()) {
      set_req_version(from.req_version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectoryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryEntry::CopyFrom(const DirectoryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DirectoryEntry::Swap(DirectoryEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(req_version_, other->req_version_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectoryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectoryEntry_descriptor_;
  metadata.reflection = DirectoryEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirectoryData::kEntriesFieldNumber;
#endif  // !_MSC_VER

DirectoryData::DirectoryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirectoryData::InitAsDefaultInstance() {
}

DirectoryData::DirectoryData(const DirectoryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirectoryData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectoryData::~DirectoryData() {
  SharedDtor();
}

void DirectoryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DirectoryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectoryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectoryData_descriptor_;
}

const DirectoryData& DirectoryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_directorydata_2eproto();
  return *default_instance_;
}

DirectoryData* DirectoryData::default_instance_ = NULL;

DirectoryData* DirectoryData::New() const {
  return new DirectoryData;
}

void DirectoryData::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectoryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .posixok.DirectoryEntry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectoryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .posixok.DirectoryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirectoryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .posixok.DirectoryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirectoryData::ByteSize() const {
  int total_size = 0;

  // repeated .posixok.DirectoryEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectoryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectoryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectoryData::MergeFrom(const DirectoryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectoryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryData::CopyFrom(const DirectoryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryData::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void DirectoryData::Swap(DirectoryData* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectoryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectoryData_descriptor_;
  metadata.reflection = DirectoryData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace posixok

// @@protoc_insertion_point(global_scope)
